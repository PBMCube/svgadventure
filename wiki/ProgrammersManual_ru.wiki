#summary Шаги по изготовлению собственного квеста на svgAdventure

= Делаем собственный квест на базе svgAdventure =

== Изображение героя ==

В каталоге engine/ располагается файл hero.png, содержащий кадры мультипликации для изображения главного героя. По умолчанию он содержит буквенно-цифровые обозначения, соответствующие направлению и фазе мультипликации (буква --- направление, цифра --- фаза):

|| *Обозначение* || *Направление* ||
|| W || "Запад" (влево по экрану) ||
|| S || "Юг" (вниз по экрану) ||
|| E || "Восток" (вправо по экрану) ||
|| N || "Север" (вверх по экрану) ||
|| O || На месте ||

Для изменения изображения героя нарисуйте в этом файле вместо буквенно-цифровых обозначений своего героя в соответствующих позах.

== Фоновые ресунки локаций ==

В каталоге engine/ находятся файлы с именами вида `sceneXXX.png`, где _XXX_ --- номер локации. Замените эти рисунки на свои файлы с аналогичным разрешением.

== Логика локаций ==

Логика прописывается в файлах с именами вида `sceneXXX.js`, где _XXX_ --- номер соответствующей локации (надо бы реализовать это более изящно, если это возможно).

=== Расположение стен ===

Расположение стен хранится в массиве landscape. В каждом файле `sceneXXX.js` есть присваивание примерно такого вида:
{{{
    landscape =
        [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
}}}

Расположение элементов игрового поля здесь такое же, как на экране; единицы соответствуют стенам, нули --- пустому месту.

=== Создание дверей ===

Для создания дверей, ведущих из локации в локацию, надо записать в файл инициализации сцены (`sceneXXX.js`, где _XXX_ --- номер сцены) строку примерно такого вида:
{{{
createDoor(0, 0, 'scene002', 0, 6);
}}}

Здесь 0, 0 (первые два числа) --- координаты самой двери, 'scene002' --- имя файла с локацией, в которую ведёт дверь, а 0, 6 (вторая пара чисел) --- точка, в которой герой окажется на новой локации после прохождения через дверь.

=== Создание объектов ===

Для создания объектов надо записать в файл инициализации сцены (`sceneXXX.js`, где _XXX_ --- номер сцены) строку примерно такого вида:

{{{
createObject(5, 5, 20, 20, 'sc001_obj01.png', 'Crystal Rock');
}}}

Здесь 5,5 (первые два числа) --- координаты объекта, 20, 20 (вторая пара чисел) --- размер его изображения, 'sc001_obj01.png' --- файл с изображением объекта, а 'Crystal Rock' --- его название (оно будет отображаться в подсказке, которую увидит пользователь).

Помимо этого вызова функции, для создания объекта вам, естественно, понадобится собственно файл с изображением.

Если вы хотите задать реакцию объекта на какие-то действия пользователя, вам необходим номер, под которым объект хранится в массиве objects. Этот номер возвращает функция createObjects, таким образом, код, добавляющий объект, должен быть таким:
{{{
var n = createObject(5, 5, 20, 20, 'sc001_obj01.png', 'Crystal Rock');
}}}

В настоящий момент можно задать носимость объекта и реакцию неносимого объекта на команду "Use" (использовать).

==== Делаем объект носимым ====

Для того, чтобы объект стал носимым (т.е. пользователь мог добавить его в свой инвентарь), нужно сделать его свойство 'portable' равным 'true', вот так:
{{{
    var n = createObject(10, 5, 20, 20, 'sc002_obj01.png', 'Crystal Rock');
    objects[n]['portable'] = true;
}}}

По умолчанию все объекты _не_ являются носимыми.

==== Определяем, как использовать объект ====

Для того, чтобы задать реакцию объекта на попытку его использовать, применяется механизм обратного вызова (callback). При создании скрипта инициализации той или иной сцены вы должны определить функцию, которая будет выполнена при использовании объекта, и поместить её в массив objects, в описание нужного объекта. Если мы определили функцию, скажем, useObject1(), как-нибудь так:
{{{
function useObject1() {
    alert('You was used this rock');
}
}}}
то задать эту функцию как реакцию на попытку использовать объект можно следующим образом:
{{{
/// Создаём объект...
var n = createObject(5, 5, 20, 20, 'sc001_obj01.png', 'Crystal Rock');
/// ...и задаём функцию для его использования
objects[n]['use'] = useObject1;
}}}

=== Изменение вида кнопок, переключающих режимы ===

Кнопки описаны в файле `modecontrol.svg`. Если вы хотите изменить их вид, отредактируйте этот файл. Важно следить за тем, чтобы каждый элемент, описывающий кнопку, имел id, содержащий название действия, которое вызывает кнопка ("walk", "get", "use" или "talk"), иначе кнопки не будут работать. В качестве примера можно воспользоваться существующим файлом `modecontrol.svg`.

[Main_ru Назад на главную страницу русского раздела]